// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { UserServiceCreateUserProfileData, UserServiceCreateUserProfileResponse, UserServiceCreateUserProfileError, UserServiceGetUserProfileData, UserServiceGetUserProfileResponse, UserServiceGetPublicProfileData, UserServiceGetPublicProfileResponse, UserServiceGetPublicProfileError, UserServiceUpdateUserProfileData, UserServiceUpdateUserProfileResponse, UserServiceUpdateUserProfileError, UserServiceGetArtistsData, UserServiceGetArtistsResponse, UserServiceGetVideographersData, UserServiceGetVideographersResponse, VideoServiceUploadVideoData, VideoServiceUploadVideoResponse, VideoServiceUploadVideoError, VideoServiceGetVideosData, VideoServiceGetVideosResponse, VideoServiceGetVideosError, VideoServiceGetVideoData, VideoServiceGetVideoResponse, VideoServiceGetVideoError, VideoServiceGetMyVideosData, VideoServiceGetMyVideosResponse, VideoServiceUpdateVideoData, VideoServiceUpdateVideoResponse, VideoServiceUpdateVideoError, VideoServiceDeleteVideoData, VideoServiceDeleteVideoResponse, VideoServiceDeleteVideoError, VideoServiceGetVideoCategoriesData, VideoServiceGetVideoCategoriesResponse, VideoServiceSearchVideosData, VideoServiceSearchVideosResponse, VideoServiceSearchVideosError, AssetServiceUploadAssetData, AssetServiceUploadAssetResponse, AssetServiceUploadAssetError, AssetServiceGetAssetsData, AssetServiceGetAssetsResponse, AssetServiceGetAssetsError, AssetServiceGetMyAssetsData, AssetServiceGetMyAssetsResponse, AssetServiceGetAssetData, AssetServiceGetAssetResponse, AssetServiceGetAssetError, AssetServiceUpdateAssetData, AssetServiceUpdateAssetResponse, AssetServiceUpdateAssetError, AssetServiceDeleteAssetData, AssetServiceDeleteAssetResponse, AssetServiceDeleteAssetError, AssetServiceGetAssetCategoriesData, AssetServiceGetAssetCategoriesResponse, AssetServiceSearchAssetsData, AssetServiceSearchAssetsResponse, AssetServiceSearchAssetsError, AssetServiceIncrementAssetUsageData, AssetServiceIncrementAssetUsageResponse, AssetServiceIncrementAssetUsageError, CollaborationServiceStartCollaborationData, CollaborationServiceStartCollaborationResponse, CollaborationServiceStartCollaborationError, CollaborationServiceGetMyCollaborationsData, CollaborationServiceGetMyCollaborationsResponse, CollaborationServiceGetMyCollaborationsError, CollaborationServiceGetCollaborationsForMyVideosData, CollaborationServiceGetCollaborationsForMyVideosResponse, CollaborationServiceGetCollaborationsForMyVideosError, CollaborationServiceGetCollaborationData, CollaborationServiceGetCollaborationResponse, CollaborationServiceGetCollaborationError, CollaborationServiceUpdateCollaborationStatusData, CollaborationServiceUpdateCollaborationStatusResponse, CollaborationServiceUpdateCollaborationStatusError, CollaborationServiceAddOverlayToCollaborationData, CollaborationServiceAddOverlayToCollaborationResponse, CollaborationServiceAddOverlayToCollaborationError, CollaborationServiceGetCollaborationOverlaysData, CollaborationServiceGetCollaborationOverlaysResponse, CollaborationServiceGetCollaborationOverlaysError, CollaborationServiceUpdateOverlayData, CollaborationServiceUpdateOverlayResponse, CollaborationServiceUpdateOverlayError, CollaborationServiceDeleteOverlayData, CollaborationServiceDeleteOverlayResponse, CollaborationServiceDeleteOverlayError, RenderServiceQueueRenderData, RenderServiceQueueRenderResponse, RenderServiceQueueRenderError, RenderServiceGetRenderStatusData, RenderServiceGetRenderStatusResponse, RenderServiceGetRenderStatusError, RenderServiceGetCollaborationRendersData, RenderServiceGetCollaborationRendersResponse, RenderServiceGetCollaborationRendersError, RenderServiceCancelRenderData, RenderServiceCancelRenderResponse, RenderServiceCancelRenderError, RenderServiceRetryRenderData, RenderServiceRetryRenderResponse, RenderServiceRetryRenderError, RenderServiceGetRenderQueueStatusData, RenderServiceGetRenderQueueStatusResponse, RecommendationEngineGetVideoOverlayRecommendationsData, RecommendationEngineGetVideoOverlayRecommendationsResponse, RecommendationEngineGetVideoOverlayRecommendationsError, RecommendationEngineGetSimilarStyleRecommendationsData, RecommendationEngineGetSimilarStyleRecommendationsResponse, RecommendationEngineGetSimilarStyleRecommendationsError, RecommendationEngineTrackRecommendationInteractionData, RecommendationEngineTrackRecommendationInteractionResponse, RecommendationEngineTrackRecommendationInteractionError, AiAnalysisServiceAnalyzeVideoForOverlaysData, AiAnalysisServiceAnalyzeVideoForOverlaysResponse, AiAnalysisServiceAnalyzeVideoForOverlaysError, AiAnalysisServiceGetSmartOverlayRecommendationsData, AiAnalysisServiceGetSmartOverlayRecommendationsResponse, AiAnalysisServiceGetSmartOverlayRecommendationsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * User Service Create User Profile
 * Create a new user profile with username and user type.
 */
export const userServiceCreateUserProfile = <ThrowOnError extends boolean = false>(options: Options<UserServiceCreateUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceCreateUserProfileResponse, UserServiceCreateUserProfileError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/create_user_profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * User Service Get User Profile
 * Get the current user&#39;s profile.
 */
export const userServiceGetUserProfile = <ThrowOnError extends boolean = false>(options?: Options<UserServiceGetUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetUserProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/get_user_profile',
        ...options
    });
};

/**
 * User Service Get Public Profile
 * Get a public user profile by user ID.
 */
export const userServiceGetPublicProfile = <ThrowOnError extends boolean = false>(options: Options<UserServiceGetPublicProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetPublicProfileResponse, UserServiceGetPublicProfileError, ThrowOnError>({
        url: '/api/user_service/get_public_profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User Service Update User Profile
 * Update the current user&#39;s profile.
 */
export const userServiceUpdateUserProfile = <ThrowOnError extends boolean = false>(options?: Options<UserServiceUpdateUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceUpdateUserProfileResponse, UserServiceUpdateUserProfileError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user_service/update_user_profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * User Service Get Artists
 * Get all artist profiles for discovery.
 */
export const userServiceGetArtists = <ThrowOnError extends boolean = false>(options?: Options<UserServiceGetArtistsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetArtistsResponse, unknown, ThrowOnError>({
        url: '/api/user_service/get_artists',
        ...options
    });
};

/**
 * User Service Get Videographers
 * Get all videographer profiles for discovery.
 */
export const userServiceGetVideographers = <ThrowOnError extends boolean = false>(options?: Options<UserServiceGetVideographersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserServiceGetVideographersResponse, unknown, ThrowOnError>({
        url: '/api/user_service/get_videographers',
        ...options
    });
};

/**
 * Video Service Upload Video
 * Upload a new video with validation.
 */
export const videoServiceUploadVideo = <ThrowOnError extends boolean = false>(options: Options<VideoServiceUploadVideoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceUploadVideoResponse, VideoServiceUploadVideoError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/video_service/upload_video',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Video Service Get Videos
 * Get videos with optional category filtering.
 */
export const videoServiceGetVideos = <ThrowOnError extends boolean = false>(options: Options<VideoServiceGetVideosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceGetVideosResponse, VideoServiceGetVideosError, ThrowOnError>({
        url: '/api/video_service/get_videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Video Service Get Video
 * Get a specific video by ID.
 */
export const videoServiceGetVideo = <ThrowOnError extends boolean = false>(options: Options<VideoServiceGetVideoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceGetVideoResponse, VideoServiceGetVideoError, ThrowOnError>({
        url: '/api/video_service/get_video',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Video Service Get My Videos
 * Get videos uploaded by the current user.
 */
export const videoServiceGetMyVideos = <ThrowOnError extends boolean = false>(options?: Options<VideoServiceGetMyVideosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceGetMyVideosResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/video_service/get_my_videos',
        ...options
    });
};

/**
 * Video Service Update Video
 * Update video metadata (only by owner).
 */
export const videoServiceUpdateVideo = <ThrowOnError extends boolean = false>(options: Options<VideoServiceUpdateVideoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceUpdateVideoResponse, VideoServiceUpdateVideoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/video_service/update_video',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Video Service Delete Video
 * Delete a video (only by owner).
 */
export const videoServiceDeleteVideo = <ThrowOnError extends boolean = false>(options: Options<VideoServiceDeleteVideoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceDeleteVideoResponse, VideoServiceDeleteVideoError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/video_service/delete_video',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Video Service Get Video Categories
 * Get list of available video categories.
 */
export const videoServiceGetVideoCategories = <ThrowOnError extends boolean = false>(options?: Options<VideoServiceGetVideoCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceGetVideoCategoriesResponse, unknown, ThrowOnError>({
        url: '/api/video_service/get_video_categories',
        ...options
    });
};

/**
 * Video Service Search Videos
 * Search videos by title or description.
 */
export const videoServiceSearchVideos = <ThrowOnError extends boolean = false>(options: Options<VideoServiceSearchVideosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VideoServiceSearchVideosResponse, VideoServiceSearchVideosError, ThrowOnError>({
        url: '/api/video_service/search_videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Upload Asset
 * Upload a new artist asset.
 */
export const assetServiceUploadAsset = <ThrowOnError extends boolean = false>(options: Options<AssetServiceUploadAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceUploadAssetResponse, AssetServiceUploadAssetError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/asset_service/upload_asset',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Asset Service Get Assets
 * Get assets with optional filtering.
 */
export const assetServiceGetAssets = <ThrowOnError extends boolean = false>(options: Options<AssetServiceGetAssetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceGetAssetsResponse, AssetServiceGetAssetsError, ThrowOnError>({
        url: '/api/asset_service/get_assets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Get My Assets
 * Get assets uploaded by the current user.
 */
export const assetServiceGetMyAssets = <ThrowOnError extends boolean = false>(options?: Options<AssetServiceGetMyAssetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceGetMyAssetsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/asset_service/get_my_assets',
        ...options
    });
};

/**
 * Asset Service Get Asset
 * Get a specific asset by ID.
 */
export const assetServiceGetAsset = <ThrowOnError extends boolean = false>(options: Options<AssetServiceGetAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceGetAssetResponse, AssetServiceGetAssetError, ThrowOnError>({
        url: '/api/asset_service/get_asset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Update Asset
 * Update asset metadata (only by owner).
 */
export const assetServiceUpdateAsset = <ThrowOnError extends boolean = false>(options: Options<AssetServiceUpdateAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceUpdateAssetResponse, AssetServiceUpdateAssetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/asset_service/update_asset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Delete Asset
 * Delete an asset (only by owner).
 */
export const assetServiceDeleteAsset = <ThrowOnError extends boolean = false>(options: Options<AssetServiceDeleteAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceDeleteAssetResponse, AssetServiceDeleteAssetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/asset_service/delete_asset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Get Asset Categories
 * Get list of available asset categories.
 */
export const assetServiceGetAssetCategories = <ThrowOnError extends boolean = false>(options?: Options<AssetServiceGetAssetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceGetAssetCategoriesResponse, unknown, ThrowOnError>({
        url: '/api/asset_service/get_asset_categories',
        ...options
    });
};

/**
 * Asset Service Search Assets
 * Search assets by name.
 */
export const assetServiceSearchAssets = <ThrowOnError extends boolean = false>(options: Options<AssetServiceSearchAssetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceSearchAssetsResponse, AssetServiceSearchAssetsError, ThrowOnError>({
        url: '/api/asset_service/search_assets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Asset Service Increment Asset Usage
 * Increment usage count when asset is used in collaboration.
 */
export const assetServiceIncrementAssetUsage = <ThrowOnError extends boolean = false>(options: Options<AssetServiceIncrementAssetUsageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AssetServiceIncrementAssetUsageResponse, AssetServiceIncrementAssetUsageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/asset_service/increment_asset_usage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Start Collaboration
 * Start a new collaboration on a video.
 */
export const collaborationServiceStartCollaboration = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceStartCollaborationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceStartCollaborationResponse, CollaborationServiceStartCollaborationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/start_collaboration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Get My Collaborations
 * Get collaborations for the current user.
 */
export const collaborationServiceGetMyCollaborations = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceGetMyCollaborationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceGetMyCollaborationsResponse, CollaborationServiceGetMyCollaborationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/get_my_collaborations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Get Collaborations For My Videos
 * Get collaborations on videos uploaded by the current user.
 */
export const collaborationServiceGetCollaborationsForMyVideos = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceGetCollaborationsForMyVideosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceGetCollaborationsForMyVideosResponse, CollaborationServiceGetCollaborationsForMyVideosError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/get_collaborations_for_my_videos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Get Collaboration
 * Get a specific collaboration by ID.
 */
export const collaborationServiceGetCollaboration = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceGetCollaborationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceGetCollaborationResponse, CollaborationServiceGetCollaborationError, ThrowOnError>({
        url: '/api/collaboration_service/get_collaboration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Update Collaboration Status
 * Update collaboration status.
 */
export const collaborationServiceUpdateCollaborationStatus = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceUpdateCollaborationStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceUpdateCollaborationStatusResponse, CollaborationServiceUpdateCollaborationStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/update_collaboration_status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Add Overlay To Collaboration
 * Add an overlay to a collaboration.
 */
export const collaborationServiceAddOverlayToCollaboration = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceAddOverlayToCollaborationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceAddOverlayToCollaborationResponse, CollaborationServiceAddOverlayToCollaborationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/add_overlay_to_collaboration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Get Collaboration Overlays
 * Get all overlays for a collaboration.
 */
export const collaborationServiceGetCollaborationOverlays = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceGetCollaborationOverlaysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceGetCollaborationOverlaysResponse, CollaborationServiceGetCollaborationOverlaysError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/get_collaboration_overlays',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Update Overlay
 * Update an overlay (only by the artist who created it).
 */
export const collaborationServiceUpdateOverlay = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceUpdateOverlayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceUpdateOverlayResponse, CollaborationServiceUpdateOverlayError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/update_overlay',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Collaboration Service Delete Overlay
 * Delete an overlay (only by the artist who created it).
 */
export const collaborationServiceDeleteOverlay = <ThrowOnError extends boolean = false>(options: Options<CollaborationServiceDeleteOverlayData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CollaborationServiceDeleteOverlayResponse, CollaborationServiceDeleteOverlayError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/collaboration_service/delete_overlay',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Queue Render
 * Queue a new render job for a collaboration.
 */
export const renderServiceQueueRender = <ThrowOnError extends boolean = false>(options: Options<RenderServiceQueueRenderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceQueueRenderResponse, RenderServiceQueueRenderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/render_service/queue_render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Get Render Status
 * Get the status of a render job.
 */
export const renderServiceGetRenderStatus = <ThrowOnError extends boolean = false>(options: Options<RenderServiceGetRenderStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceGetRenderStatusResponse, RenderServiceGetRenderStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/render_service/get_render_status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Get Collaboration Renders
 * Get all renders for a collaboration.
 */
export const renderServiceGetCollaborationRenders = <ThrowOnError extends boolean = false>(options: Options<RenderServiceGetCollaborationRendersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceGetCollaborationRendersResponse, RenderServiceGetCollaborationRendersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/render_service/get_collaboration_renders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Cancel Render
 * Cancel a queued or processing render.
 */
export const renderServiceCancelRender = <ThrowOnError extends boolean = false>(options: Options<RenderServiceCancelRenderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceCancelRenderResponse, RenderServiceCancelRenderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/render_service/cancel_render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Retry Render
 * Retry a failed render.
 */
export const renderServiceRetryRender = <ThrowOnError extends boolean = false>(options: Options<RenderServiceRetryRenderData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceRetryRenderResponse, RenderServiceRetryRenderError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/render_service/retry_render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render Service Get Render Queue Status
 * Get general render queue statistics.
 */
export const renderServiceGetRenderQueueStatus = <ThrowOnError extends boolean = false>(options?: Options<RenderServiceGetRenderQueueStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderServiceGetRenderQueueStatusResponse, unknown, ThrowOnError>({
        url: '/api/render_service/get_render_queue_status',
        ...options
    });
};

/**
 * Recommendation Engine Get Video Overlay Recommendations
 * Get overlay recommendations for a video with multiple recommendation strategies.
 */
export const recommendationEngineGetVideoOverlayRecommendations = <ThrowOnError extends boolean = false>(options: Options<RecommendationEngineGetVideoOverlayRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecommendationEngineGetVideoOverlayRecommendationsResponse, RecommendationEngineGetVideoOverlayRecommendationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recommendation_engine/get_video_overlay_recommendations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recommendation Engine Get Similar Style Recommendations
 * Get recommendations similar to a specific asset.
 */
export const recommendationEngineGetSimilarStyleRecommendations = <ThrowOnError extends boolean = false>(options: Options<RecommendationEngineGetSimilarStyleRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecommendationEngineGetSimilarStyleRecommendationsResponse, RecommendationEngineGetSimilarStyleRecommendationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recommendation_engine/get_similar_style_recommendations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Recommendation Engine Track Recommendation Interaction
 * Track user interaction with recommendations for learning.
 */
export const recommendationEngineTrackRecommendationInteraction = <ThrowOnError extends boolean = false>(options: Options<RecommendationEngineTrackRecommendationInteractionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RecommendationEngineTrackRecommendationInteractionResponse, RecommendationEngineTrackRecommendationInteractionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recommendation_engine/track_recommendation_interaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Ai Analysis Service Analyze Video For Overlays
 * Analyze a video and return AI-powered overlay recommendations.
 */
export const aiAnalysisServiceAnalyzeVideoForOverlays = <ThrowOnError extends boolean = false>(options: Options<AiAnalysisServiceAnalyzeVideoForOverlaysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AiAnalysisServiceAnalyzeVideoForOverlaysResponse, AiAnalysisServiceAnalyzeVideoForOverlaysError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/ai_analysis_service/analyze_video_for_overlays',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Ai Analysis Service Get Smart Overlay Recommendations
 * Get AI-recommended overlays for a specific video.
 */
export const aiAnalysisServiceGetSmartOverlayRecommendations = <ThrowOnError extends boolean = false>(options: Options<AiAnalysisServiceGetSmartOverlayRecommendationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AiAnalysisServiceGetSmartOverlayRecommendationsResponse, AiAnalysisServiceGetSmartOverlayRecommendationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/ai_analysis_service/get_smart_overlay_recommendations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};