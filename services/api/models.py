# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

# Import user-defined models that we need for input/response models
from core.user_profiles import UserProfile
from core.videos import Video
from core.artist_assets import ArtistAsset
from core.collaborations import Collaboration
from core.overlays import Overlay
from core.renders import Render

CreateUserProfileOutputSchema = UserProfile
GetUserProfileOutputSchema = Optional[UserProfile]
class BodyUserServiceGetPublicProfile(BaseModel):
  user_id: UUID

GetPublicProfileOutputSchema = Optional[UserProfile]
UpdateUserProfileOutputSchema = UserProfile
GetArtistsOutputSchema = List[UserProfile]
GetVideographersOutputSchema = List[UserProfile]
UploadVideoOutputSchema = Video
class BodyVideoServiceGetVideos(BaseModel):
  category: Optional[str] = None
  limit: int
  offset: int

GetVideosOutputSchema = List[Video]
class BodyVideoServiceGetVideo(BaseModel):
  video_id: UUID

GetVideoOutputSchema = Optional[Video]
GetMyVideosOutputSchema = List[Video]
class BodyVideoServiceUpdateVideo(BaseModel):
  video_id: UUID
  title: Optional[str] = None
  description: Optional[str] = None
  category: Optional[str] = None

UpdateVideoOutputSchema = Video
class BodyVideoServiceDeleteVideo(BaseModel):
  video_id: UUID

DeleteVideoOutputSchema = bool
GetVideoCategoriesOutputSchema = List[str]
class BodyVideoServiceSearchVideos(BaseModel):
  query: str
  category: Optional[str] = None
  limit: int

SearchVideosOutputSchema = List[Video]
UploadAssetOutputSchema = ArtistAsset
class BodyAssetServiceGetAssets(BaseModel):
  category: Optional[str] = None
  artist_id: Optional[UUID] = None
  limit: int
  offset: int

GetAssetsOutputSchema = List[ArtistAsset]
GetMyAssetsOutputSchema = List[ArtistAsset]
class BodyAssetServiceGetAsset(BaseModel):
  asset_id: UUID

GetAssetOutputSchema = Optional[ArtistAsset]
class BodyAssetServiceUpdateAsset(BaseModel):
  asset_id: UUID
  name: Optional[str] = None
  category: Optional[str] = None
  is_public: Optional[bool] = None

UpdateAssetOutputSchema = ArtistAsset
class BodyAssetServiceDeleteAsset(BaseModel):
  asset_id: UUID

DeleteAssetOutputSchema = bool
GetAssetCategoriesOutputSchema = List[str]
class BodyAssetServiceSearchAssets(BaseModel):
  query: str
  category: Optional[str] = None
  limit: int

SearchAssetsOutputSchema = List[ArtistAsset]
class BodyAssetServiceIncrementAssetUsage(BaseModel):
  asset_id: UUID

IncrementAssetUsageOutputSchema = bool
class BodyCollaborationServiceStartCollaboration(BaseModel):
  video_id: UUID
  revenue_split: float

StartCollaborationOutputSchema = Collaboration
class BodyCollaborationServiceGetMyCollaborations(BaseModel):
  status: Optional[str] = None

GetMyCollaborationsOutputSchema = List[Collaboration]
class BodyCollaborationServiceGetCollaborationsForMyVideos(BaseModel):
  status: Optional[str] = None

GetCollaborationsForMyVideosOutputSchema = List[Collaboration]
class BodyCollaborationServiceGetCollaboration(BaseModel):
  collaboration_id: UUID

GetCollaborationOutputSchema = Optional[Collaboration]
class BodyCollaborationServiceUpdateCollaborationStatus(BaseModel):
  collaboration_id: UUID
  status: str
  submission_notes: Optional[str] = None
  feedback: Optional[str] = None

UpdateCollaborationStatusOutputSchema = Collaboration
class BodyCollaborationServiceAddOverlayToCollaboration(BaseModel):
  collaboration_id: UUID
  asset_id: UUID
  position_data: Dict
  timing_data: Dict
  layer_order: int

AddOverlayToCollaborationOutputSchema = Overlay
class BodyCollaborationServiceGetCollaborationOverlays(BaseModel):
  collaboration_id: UUID

GetCollaborationOverlaysOutputSchema = List[Overlay]
class BodyCollaborationServiceUpdateOverlay(BaseModel):
  overlay_id: UUID
  position_data: Optional[Dict] = None
  timing_data: Optional[Dict] = None
  layer_order: Optional[int] = None

UpdateOverlayOutputSchema = Overlay
class BodyCollaborationServiceDeleteOverlay(BaseModel):
  overlay_id: UUID

DeleteOverlayOutputSchema = bool
class BodyRenderServiceQueueRender(BaseModel):
  collaboration_id: UUID
  render_settings: Optional[Dict] = None

QueueRenderOutputSchema = Render
class BodyRenderServiceGetRenderStatus(BaseModel):
  render_id: UUID

GetRenderStatusOutputSchema = Optional[Render]
class BodyRenderServiceGetCollaborationRenders(BaseModel):
  collaboration_id: UUID

GetCollaborationRendersOutputSchema = List[Render]
class BodyRenderServiceCancelRender(BaseModel):
  render_id: UUID

CancelRenderOutputSchema = bool
class BodyRenderServiceRetryRender(BaseModel):
  render_id: UUID

RetryRenderOutputSchema = Render
GetRenderQueueStatusOutputSchema = Dict[str, int]
class BodyRecommendationEngineGetVideoOverlayRecommendations(BaseModel):
  video_id: UUID
  recommendation_type: str
  limit: int

GetVideoOverlayRecommendationsOutputSchema = Dict
class BodyRecommendationEngineGetSimilarStyleRecommendations(BaseModel):
  video_id: UUID
  reference_asset_id: UUID
  limit: int

GetSimilarStyleRecommendationsOutputSchema = Dict
class BodyRecommendationEngineTrackRecommendationInteraction(BaseModel):
  video_id: UUID
  asset_id: UUID
  action: str
  metadata: Optional[Dict] = None

TrackRecommendationInteractionOutputSchema = bool
class BodyAiAnalysisServiceAnalyzeVideoForOverlays(BaseModel):
  video_id: UUID

AnalyzeVideoForOverlaysOutputSchema = Dict
class BodyAiAnalysisServiceGetSmartOverlayRecommendations(BaseModel):
  video_id: UUID
  limit: int

GetSmartOverlayRecommendationsOutputSchema = List[Dict]
    